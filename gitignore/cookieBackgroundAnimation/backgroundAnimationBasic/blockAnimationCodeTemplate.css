/*Les animations CSS3.

Depuis CSS3, vous avez la possibilité de faire des animations en CSS3. Cependant, actuellement (05-2013) beaucoup navigateurs ne reconnaissent pas les propriétés CSS3 sans les avoir au préalable préfixées. Par exemple, rien que pour définir le bloc d'animation, il faut faire quatre déclarations :*/

@-webkit-keyframes nomanimation {
  ...;
} /* -webkit- Chrome et Safari */
@-moz-keyframes nomanimation {
  ...;
} /* -moz -Firefox */
@-o-keyframes nomanimation {
  ...;
} /* -o- Opera */
@keyframes nomanimation {
  ...;
} /* Navigateur aux normes w3c */


/* 1- En Css3 votre animation est regroupée dans une règle Css @keyframes. Cette règle décrit les propriétés CSS à modifier par image clé. l'animation Css3, vous devez faire le calcul suivant :
Seconde ciblée*100/Durée totale soit 10*100/20 = 50%. */

@keyframes nomanimation {
  0% {
    /* Propriétés css à modifier au départ */
  }
  50% {
    /* Propriétés css à modifier à la 10s dans notre cas */
  }
  100% {
    /* Propriétés css à modifier à la fin */
  }
}

/* 2- La propriété Css3 animation-name va vous permettre spécifier le nom l'animation à utiliser. Vous lui assignerez la valeur de l'identifiant de l'animation Css3, dans notre cas nomanimation. */

@keyframes nomanimation {
  ...;
}
div.bloccible {
  animation-name: nomanimation;
}

/* 3- la propriété CSS3 animation-duration.
Cette durée peut être exprimée en :
- secondes, le nombre sera suivit par "s"
- millisecondes : le nombre sera suivit par "ms". */

@keyframes nomanimation {
  ...;
}
div.bloccible {
  animation-name: nomanimation;
  animation-duration: 20s;
}


/* 4- La propriété css3 animation-iteration-count:infinite va vous permettre de jouer en boucle l'animation CSS3. La valeur par défaut est 1.*/

@keyframes nomanimation { ... }
div.bloccible{ animation-name : nomanimation; animation-iteration-count : infinite; }


/* 5- la propriété css3 animation-fill-mode qui permet de spécifier la manière dont doit être interprété les propriétés css contenues dans la première ou dernière image clé.
Dans le code suivant, la couleur initiale est yellow, quand l'animation Css va commencer la couleur devient red puis évolue vers le green et une fois l'animation Css finie la couleur redevient yellow, */

@keyframes nomanimation { 0%{background-color:red;} 100%{background-color:green;} }
div.bloccible{ animation-name : nomanimation; background-color:yellow; }


/* 6- Dans le code suivant, la couleur initiale est la couleur de la première image clé, quand l'animation Css3 va commencer la couleur évolue vers le green et une fois l'animation Css3 finie la couleur reste green, */

@keyframes nomanimation { 0%{background-color:red;} 100%{background-color:green;} }
div.bloccible{ animation-name : nomanimation; background-color:yellow; animation-fill-mode:both;}


/*Il existe d'autres propriétés CSS3 pour paramétrer votre animation Css que je vous laisse découvrir :
- animation-timing-function : cette propriété css3 permet de spécifier la manière de progresser entre les images clés. Sa valeur par défaut est ease.
- animation-play-state : cette propriété css3 permet de mettre en pause l'animation Css. Sa valeur par défaut est running.
- animation-direction : cette propriété css3 permet de spécifier le sens de lecture de l'animation. Sa valeur par défaut est normal
- animation-delay : cette propriété css3 permet de spécifier un temps de latence avant de commencer la lecture de l'animation. Sa valeur par défaut est 0s.
- animation-direction : cette propriété css3 permet de spécifier permet de spécifier le sens de lecture de l'animation appliquée, notamment pour les répétitions. Sa valeur par défaut est normal. */



/* 7- Déclencher une animation CSS3.
Directement à l'exécution. Vous pouvez déclencher une animation CSS3 directement comme nous l'avons fait dans les exemples précédant.*/

@keyframes monanimation {
0% {margin-left:0;}
100% {margin-left:100px;}
}
div.bloccible{ animation-name : nomanimation;}


/* 8- Vous pouvez déclencher votre animation CSS3 lors d'un changement d'état par exemple lorsque la souris survole l'élément qui doit être animé. Pour cela vous devez utilise une pseudo-classe comme :hover, :focus,...*/

@keyframes monanimation {
    0% {margin-left:0;}
    100% {margin-left:100px;}
    }
    div.bloccible:hover{ animation-name : nomanimation;}



/* 9- Une autre possibilité pour déclencher votre animation CSS3, consiste à assigner en Javascript la classe à l'élément qui doit être animé.*/   

<style>@keyframes monanimation {
0% {margin-left:0;}
100% {margin-left:100px;}
}
.mon-animation{ animation-name : nomanimation;}</style>
<div id="bloc-anime" onclick="addAnimation()">element animable</div>
<script>
function addAnimation(){
// Avec Jquery
$("#bloc-anime").addClass("mon-animation")
// En javascript
document.getElementById("bloc-anime").classList.add("mon-animation")
}
</script> 


/* 10- 
Animation vs transition.

En règle générale, vous utiliserez plus souvent des transitions (transition), car votre "Animation" se limite à un changement ne nécessitant que deux étapes.

Partez du principe que vous devez utiliser les transitions par défaut. Voici les éléments qui font que vous utilisez la propriété css @keyframes plutôt que la propriété css transition :
- L'Animation doit se répéter.
- L'Animation a besoin de points intermédiaires.
- L'Animation démarre toute seule.
- L'Animation peut faire une pause.

Sachez aussi :
- que les Transitions sont plus simples à gérer en javascript.
- que lorsqu'une transition est interrompue durant son exécution, chaque propriété modifiée peut revenir à son état initial en étant animées, ce que ne peut pas faire les animations.
*/




/* 11- Exemples d'animation CSS3.
Exemple d'animation Css de couleurs :*/

@-webkit-keyframes nomanimationa {
 0%{background-color:red;}
 25%{background-color:yellow;}
 50%{background-color:fuchsia ;}
 100%{background-color:green;}
}
@-moz-keyframes nomanimationa {
 0%{background-color:red;}
 25%{background-color:yellow;}
 50%{background-color:fuchsia ;}
 100%{background-color:green;}
}
@-o-keyframes nomanimationa {
 0%{background-color:red;}
 25%{background-color:yellow;}
 50%{background-color:fuchsia ;}
 100%{background-color:green;}
}
@keyframes nomanimationa{
 0%{background-color:red;}
 25%{background-color:yellow;}
 50%{background-color:fuchsia ;}
 100%{background-color:green;}
}
div.exemplea{
 -webkit-animation-name : nomanimationa;
 -moz-animation-name : nomanimationa;
 -o-animation-name : nomanimationa;
 animation-name : nomanimationa;
 -webkit-animation-duration : 10s;
 -moz-animation-duration : 10s;
 -o-animation-duration : 10s;
 animation-duration: 10s;
 width:100%;
 height:15px;
 background-color:red;
} 



/* 12- Exemple d'animation de couleurs avec mise en pause : */

@-webkit-keyframes nomanimationa {
    0%{background-color:red;}
    25%{background-color:yellow;}
    50%{background-color:fuchsia ;}
    100%{background-color:green;}
   }
   @-moz-keyframes nomanimationa {
    0%{background-color:red;}
    25%{background-color:yellow;}
    50%{background-color:fuchsia ;}
    100%{background-color:green;} }
   @-o-keyframes nomanimationa {
    0%{background-color:red;}
    25%{background-color:yellow;}
    50%{background-color:fuchsia ;}
    100%{background-color:green;}
   }
   @keyframes nomanimationa{
    0%{background-color:red;}
    25%{background-color:yellow;}
    50%{background-color:fuchsia ;}
    100%{background-color:green;}
   }
   div.exemplea{
    -webkit-animation-name : nomanimationa;
    -moz-animation-name : nomanimationa;
    -o-animation-name : nomanimationa;
    animation-name : nomanimationa;
    -webkit-animation-duration : 10s;
    -moz-animation-duration : 10s;
    -o-animation-duration : 10s;
    animation-duration: 10s;
    width:100%;
    height:15px;
    background-color:red;
   } 


   /* 13-    Exemple d'animation de couleurs avec mise en pause :*/

@-webkit-keyframes nomanimationc {
0%{ webkit-transform : rotate(1deg); transform : rotate(1deg); }
100%{ -webkit-transform : rotate(360deg); transform : rotate(360deg); }
}
@-moz-keyframes nomanimationc {
0%{ -moz-transform : rotate(1deg); transform : rotate(1deg); }
100%{ -moz-transform : rotate(360deg); transform : rotate(360deg); }
}
@-o-keyframes nomanimationc {
0%{ -o-transform : rotate(1deg); transform : rotate(1deg); }
100%{ -o-transform : rotate(360deg); transform : rotate(360deg); }
}
@keyframes nomanimationc{
0%{
-webkit-transform : rotate(1deg); -moz-transform : rotate(1deg);
-o-transform : rotate(1deg); transform : rotate(1deg);
}
100%{
-webkit-transform : rotate(360deg); -moz-transform : rotate(360deg);
-o-transform : rotate(360deg); transform : rotate(360deg);
}
}
.exemplec:hover {
-webkit-animation-play-state : paused; -moz-animation-play-state : paused;
-o-animation-play-state : paused; animation-play-state : paused;
}
.exemplec {
 -webkit-animation-name : nomanimationc;
 -moz-animation-name : nomanimationc;
 -o-animation-name : nomanimationc;
 animation-name : nomanimationc;
 -webkit-animation-duration : 10s;
 -moz-animation-duration : 10s;
 -o-animation-duration : 10s;
 animation-duration: 10s;
 -webkit-animation-iteration-count : infinite;
 -moz-animation-iteration-count : infinite;
 -o-animation-iteration-count : infinite;
 animation-iteration-count : infinite;
display:block; height:15px; width:200px; padding:1em; } 

/* Usefull -links- CSS Easing Animation Tool - test

https://cubic-bezier.com/#.17,.67,.83,.67
https://matthewlein.com/tools/ceaser

Guide-
https://www.zonecss.fr/compatibilite-version/navigateur-compatibilite-css-animation.html#specificationw3c
https://www.zonecss.fr/cours-css/
https://www.zonecss.fr/cours-css-javascript/

*/


  /*La règle d'Animation CSS @keyframes permet spécifier les images clés d'une animation CSS.
Exemple de syntaxe CSS @keyframes{} :*/

@keyframes identifiant{ 
    from {width: 300px}
    to {width: 100px;}
  }

/* La règle d'Animation CSS @keyframes est composée d'au moins deux ou plusieurs images clés.
Exemple d'écriture CSS de @keyframes : */

@keyframes identifiant{ 
    identifiantCle {...}
    identifiantCle {...} 
  }
  //Avec vrais valeurs
  @keyframes identifiant{ 
    from {...} /* identique à 0% {...}*/
    50% {...} /* image clé intermédiaire */
    90% {...} /* image clé intermédiaire */
    to{...}  /* identique à 100% {...}*/
  }



/*La propriété d'Animation CSS animation est un raccourci permet de spécifier l'ensemble des propriétés CSS d'Animation à appliquer une animation CSS.
Exemple de syntaxe CSS animation :*/

  .mon-animation{
    animation : une-animation 5s ease-out 0s infinite normal none;
  }
  @keyframes une-animation{ ...}  


 /* Exemple d'écriture CSS d'une animation définie individuellement :*/

  .mon-animation{ 
    animation-name : identifiant-animation;
    animation-timing-function : ease; 
    animation-iteration-count : 1;
    animation-direction : normal ;
    animation-fill-mode : none;
    animation-play-state : running;
    animation-duration : 2s;
    animation-delay : 2s;
  }  



  /*La propriété d'Animation CSS animation accepte une ou plusieurs valeurs citées ci-dessus qui seront séparées par un espace. Ce groupe de valeurs forme une déclaration d'une animation.
Si vous désirez déclarer une seconde animation, vous devez séparer les groupes de valeurs par une virgule.
Exemple d'écriture CSS d'animation :*/

.mes-animations{
  animation : une-animation 5s ease-out 0s infinite normal none
  ,
  deuxieme-animation 3s ease 1ms infinite;
}

@keyframes une-animation{ ...}
@keyframes deuxieme-animation{ ...}


